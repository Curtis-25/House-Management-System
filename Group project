#include <stdio.h>
#include <string.h>

#define MAX_TENANTS 50

struct Tenant {
    char name[50];
    int apartmentNumber;
    int monthsStayed;
    float deposit;
    int isDepositRefunded;
    int damageReported;
    float damageCost;
};

float calculateRefund(struct Tenant t) {
    if (t.isDepositRefunded && t.damageCost <= t.deposit) {
        return t.deposit - t.damageCost;
    }
    return 0.0;
}

void addTenant(struct Tenant tenants[], int *tenantCount) {
    if (*tenantCount >= MAX_TENANTS) {
        printf("Cannot add more tenants. Maximum limit reached.\n");
        return;
    }

    struct Tenant newTenant;
    printf("Enter Tenant Name: ");
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
    fgets(newTenant.name, sizeof(newTenant.name), stdin);
    newTenant.name[strcspn(newTenant.name, "\n")] = '\0';

    printf("Enter Apartment Number: ");
    scanf("%d", &newTenant.apartmentNumber);

    printf("Enter Number of Months Stayed: ");
    scanf("%d", &newTenant.monthsStayed);

    printf("Enter Deposit Amount: ");
    scanf("%f", &newTenant.deposit);

    printf("Was there any room damage? (1 = Yes, 0 = No): ");
    scanf("%d", &newTenant.damageReported);

    if (newTenant.damageReported) {
        printf("Enter damage cost: ");
        scanf("%f", &newTenant.damageCost);
        if (newTenant.damageCost > newTenant.deposit) {
            newTenant.damageCost = newTenant.deposit;
        }
    } else {
        newTenant.damageCost = 0.0;
    }

    newTenant.isDepositRefunded = (newTenant.monthsStayed >= 3 && !newTenant.damageReported) ? 1 : 0;

    tenants[*tenantCount] = newTenant;
    (*tenantCount)++;
    printf("Tenant added successfully!\n");
}

void displayTenants(struct Tenant tenants[], int tenantCount) {
    printf("\n%-5s %-20s %-10s %-10s %-10s %-10s %-10s\n",
           "No.", "Name", "Apt No.", "Months", "Deposit", "Refund", "Refund Amt");
    for (int i = 0; i < tenantCount; i++) {
        printf("%-5d %-20s %-10d %-10d %-10.2f %-10s %-10.2f\n",
               i + 1,
               tenants[i].name,
               tenants[i].apartmentNumber,
               tenants[i].monthsStayed,
               tenants[i].deposit,
               tenants[i].isDepositRefunded ? "Yes" : "No",
               calculateRefund(tenants[i]));
    }
}

void displayNonRefundableDeposits(struct Tenant tenants[], int tenantCount) {
    printf("\nTenants with Non-Refundable Deposits:\n");
    for (int i = 0; i < tenantCount; i++) {
        if (!tenants[i].isDepositRefunded) {
            printf("Name: %s, Apartment: %d, Months Stayed: %d, Deposit: %.2f\n",
                   tenants[i].name, tenants[i].apartmentNumber, tenants[i].monthsStayed, tenants[i].deposit);
        }
    }
}

void searchTenant(struct Tenant tenants[], int tenantCount) {
    char searchName[50];
    int found = 0;
    printf("Enter tenant name to search: ");
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
    fgets(searchName, sizeof(searchName), stdin);
    searchName[strcspn(searchName, "\n")] = '\0';

    for (int i = 0; i < tenantCount; i++) {
        if (strcasestr(tenants[i].name, searchName)) {
            printf("\nTenant Found:\n");
            printf("Name: %s\n", tenants[i].name);
            printf("Apartment: %d\n", tenants[i].apartmentNumber);
            printf("Months Stayed: %d\n", tenants[i].monthsStayed);
            printf("Refund Status: %s\n", tenants[i].isDepositRefunded ? "Refunded" : "Not Refunded");
            printf("Refund Amount: %.2f\n", calculateRefund(tenants[i]));
            found = 1;
        }
    }
    if (!found) {
        printf("Tenant not found.\n");
    }
}

void updateTenant(struct Tenant tenants[], int tenantCount) {
    char name[50];
    int found = 0;
    printf("Enter name of tenant to update: ");
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = '\0';

    for (int i = 0; i < tenantCount; i++) {
        if (strcasecmp(tenants[i].name, name) == 0) {
            printf("Enter new Apartment Number: ");
            scanf("%d", &tenants[i].apartmentNumber);
            printf("Enter new Months Stayed: ");
            scanf("%d", &tenants[i].monthsStayed);
            printf("Enter new Deposit: ");
            scanf("%f", &tenants[i].deposit);
            printf("Was there damage? (1 = Yes, 0 = No): ");
            scanf("%d", &tenants[i].damageReported);
            if (tenants[i].damageReported) {
                printf("Enter new Damage Cost: ");
                scanf("%f", &tenants[i].damageCost);
            } else {
                tenants[i].damageCost = 0;
            }

            tenants[i].isDepositRefunded = (tenants[i].monthsStayed >= 3 && !tenants[i].damageReported);
            printf("Tenant updated successfully!\n");
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("Tenant not found.\n");
    }
}

void deleteTenant(struct Tenant tenants[], int *tenantCount) {
    char name[50];
    int found = 0;
    printf("Enter name of tenant to delete: ");
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = '\0';

    for (int i = 0; i < *tenantCount; i++) {
        if (strcasecmp(tenants[i].name, name) == 0) {
            for (int j = i; j < *tenantCount - 1; j++) {
                tenants[j] = tenants[j + 1];
            }
            (*tenantCount)--;
            printf("Tenant deleted successfully!\n");
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Tenant not found.\n");
    }
}

void sortTenantsByName(struct Tenant tenants[], int tenantCount) {
    for (int i = 0; i < tenantCount - 1; i++) {
        for (int j = i + 1; j < tenantCount; j++) {
            if (strcasecmp(tenants[i].name, tenants[j].name) > 0) {
                struct Tenant temp = tenants[i];
                tenants[i] = tenants[j];
                tenants[j] = temp;
            }
        }
    }
    printf("Tenants sorted by name.\n");
}

void saveTenantsToFile(struct Tenant tenants[], int tenantCount) {
    FILE *file = fopen("tenants.txt", "w");
    if (!file) {
        printf("Error saving to file.\n");
        return;
    }
    fwrite(tenants, sizeof(struct Tenant), tenantCount, file);
    fclose(file);
    printf("Tenants saved to file.\n");
}

int loadTenantsFromFile(struct Tenant tenants[]) {
    FILE *file = fopen("tenants.txt", "r");
    if (!file) {
        printf("No saved tenants found.\n");
        return 0;
    }
    int count = fread(tenants, sizeof(struct Tenant), MAX_TENANTS, file);
    fclose(file);
    printf("%d tenant(s) loaded from file.\n", count);
    return count;
}

int main() {
    struct Tenant tenants[MAX_TENANTS];
    int tenantCount = 0;
    int choice;

    tenantCount = loadTenantsFromFile(tenants);

    while (1) {
        printf("\nTenant Management System\n");
        printf("1. Add Tenant\n");
        printf("2. Display All Tenants\n");
        printf("3. Display Non-Refundable Deposits\n");
        printf("4. Search Tenant\n");
        printf("5. Update Tenant Info\n");
        printf("6. Delete Tenant\n");
        printf("7. Sort Tenants by Name\n");
        printf("8. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addTenant(tenants, &tenantCount); break;
            case 2: displayTenants(tenants, tenantCount); break;
            case 3: displayNonRefundableDeposits(tenants, tenantCount); break;
            case 4: searchTenant(tenants, tenantCount); break;
            case 5: updateTenant(tenants, tenantCount); break;
            case 6: deleteTenant(tenants, &tenantCount); break;
            case 7: sortTenantsByName(tenants, tenantCount); break;
            case 8:
                saveTenantsToFile(tenants, tenantCount);
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}
