#include <stdio.h>
#include <string.h>

#define MAX_TENANTS 50
struct Tenant {
    char name[50];
    int apartmentNumber;
    int monthsStayed;
    float deposit;
    int isDepositRefunded;
    int damageReported;
    float damageCost;
};

void addTenant(struct Tenant tenants[], int *tenantCount) {
    struct Tenant newTenant;
    printf("Enter Tenant Name: ");
    getchar(); // to clear the buffer
    fgets(newTenant.name, sizeof(newTenant.name), stdin);
    newTenant.name[strcspn(newTenant.name, "\n")] = '\0'; 

    printf("Enter Apartment Number: ");
    scanf("%d", &newTenant.apartmentNumber);

    printf("Enter Number of Months Stayed: ");
    scanf("%d", &newTenant.monthsStayed);

    printf("Enter Deposit Amount: ");
    scanf("%f", &newTenant.deposit);
    printf("Enter Deposit Amount: ");
    scanf("%f", &newTenant.deposit);
// Check if deposit will be refunded
    if (newTenant.monthsStayed >= 3) {
        newTenant.isDepositRefunded = 1;
    } else {
        newTenant.isDepositRefunded = 0;
    }

    printf("Was there any room damage? (1 = Yes, 0 = No): ");
    scanf("%d", &newTenant.damageReported);

    if (newTenant.damageReported) {
        printf("Enter damage cost: ");
        scanf("%f", &newTenant.damageCost);
    } else {
        newTenant.damageCost = 0.0;
    }

    tenants[*tenantCount] = newTenant;
    (*tenantCount)++;
    printf("Tenant added successfully!\n");
}
void displayTenants(struct Tenant tenants[], int tenantCount) {
    printf("\nTenant List:\n");
    for (int i = 0; i < tenantCount; i++) {
        printf("\nTenant %d\n", i + 1);
        printf("Name: %s\n", tenants[i].name);
        printf("Apartment Number: %d\n", tenants[i].apartmentNumber);
        printf("Months Stayed: %d\n", tenants[i].monthsStayed);
        printf("Deposit Amount: %.2f\n", tenants[i].deposit);
        printf("Damage Reported: %s\n", tenants[i].damageReported ? "Yes" : "No");
        printf("Damage Cost: %.2f\n", tenants[i].damageCost);
        if (tenants[i].isDepositRefunded) {
            printf("Deposit Refund Status: Refunded\n");
        } else {
            printf("Deposit Refund Status: Not Refunded\n");
        }
    }
}

void displayNonRefundableDeposits(struct Tenant tenants[], int tenantCount) {
    printf("\nTenants with Non-Refundable Deposits:\n");
    for (int i = 0; i < tenantCount; i++) {
        if (!tenants[i].isDepositRefunded) {
            printf("Name: %s, Apartment: %d, Months Stayed: %d, Deposit: %.2f\n",
                   tenants[i].name, tenants[i].apartmentNumber, tenants[i].monthsStayed, tenants[i].deposit);
        }
    }
}

int main() {
    struct Tenant tenants[MAX_TENANTS];
    int tenantCount = 0;
    int choice;

    while (1) {
        printf("\nTenant Management System\n");
        printf("1. Add Tenant\n");
        printf("2. Display All Tenants\n");
        printf("3. Display Tenants with Non-Refundable Deposits\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTenant(tenants, &tenantCount);
                break;
            case 2:
                displayTenants(tenants, tenantCount);
                break;
            case 3:
                displayNonRefundableDeposits(tenants, tenantCount);
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
}
